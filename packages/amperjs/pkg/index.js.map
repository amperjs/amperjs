{
  "version": 3,
  "sources": ["../src/index.ts", "../src/templates/@src/api/app.hbs", "../src/templates/@src/api/router.hbs", "../src/templates/@src/api/server.hbs", "../src/templates/@src/api/use.hbs", "../src/templates/@src/config/index.hbs", "../src/templates/@src/vite.config.hbs", "../src/templates/.gitignore.hbs", "../src/templates/esbuild.hbs", "../src/templates/package.hbs", "../src/templates/tsconfig.hbs", "../src/templates/vite.base.hbs"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps --no-warnings=ExperimentalWarning\n\nimport { execFileSync } from \"node:child_process\";\nimport { basename, join, resolve } from \"node:path\";\nimport { parseArgs, styleText } from \"node:util\";\n\nimport fsx from \"fs-extra\";\nimport colors from \"kleur\";\nimport prompts, { type PromptObject } from \"prompts\";\n\nimport { defaults, renderToFile } from \"@amperjs/devlib\";\n\nimport srcApiAppTpl from \"./templates/@src/api/app.hbs\";\nimport srcApiRouterTpl from \"./templates/@src/api/router.hbs\";\nimport srcApiServerTpl from \"./templates/@src/api/server.hbs\";\nimport srcApiUseTpl from \"./templates/@src/api/use.hbs\";\nimport srcConfigTpl from \"./templates/@src/config/index.hbs\";\nimport srcViteConfigTpl from \"./templates/@src/vite.config.hbs\";\nimport gitignoreTpl from \"./templates/.gitignore.hbs\";\nimport esbuildTpl from \"./templates/esbuild.hbs\";\nimport packageTpl from \"./templates/package.hbs\";\nimport tsconfigTpl from \"./templates/tsconfig.hbs\";\nimport viteBaseTpl from \"./templates/vite.base.hbs\";\n\nconst onState: PromptObject[\"onState\"] = (state) => {\n  if (state.aborted) {\n    process.nextTick(() => process.exit(1));\n  }\n};\n\nconst cwd = process.cwd();\n\nconst tplDir = (...a: Array<string>) => {\n  return join(import.meta.dirname, \"templates\", ...a);\n};\n\nconst genericContext = {\n  // coming from esbuild\n  NODE_VERSION: String(process.env.AMPERJS__NODE_VERSION),\n  ESBUILD_TARGET: String(process.env.AMPERJS__ESBUILD_TARGET),\n};\n\nconst validateNameIdentifier = (name: string) => {\n  if (/[^\\w.@$+-]/.test(name)) {\n    return \"May contain only alphanumerics, hyphens, periods or any of @ $ +\";\n  }\n  return true;\n};\n\nconst halt = (error?: string) => {\n  if (error) {\n    console.log();\n    console.error(`${colors.red(\"ERROR\")}: ${error}`);\n  }\n  process.exit(1);\n};\n\nconst usage = [\n  \"\",\n  `${styleText(\"blue\", \"amperjs\")} \u279C Create a new Project or a new Source Folder if current dir is a valid AmperJS Project`,\n  `${styleText(\"blue\", \"amperjs\")} ${styleText(\"magenta\", \"-h | --help\")} \u279C Print this message and exit`,\n  \"\",\n];\n\nconst printUsage = () => {\n  for (const line of usage) {\n    console.log(line);\n  }\n};\n\nconst copyFiles = async (\n  src: string,\n  dst: string,\n  { exclude = [] }: { exclude?: Array<string | RegExp> } = {},\n): Promise<void> => {\n  const filter = exclude.length\n    ? (path: string) => {\n        return !exclude.some((e) => {\n          return typeof e === \"string\" ? e === basename(path) : e.test(path);\n        });\n      }\n    : undefined;\n\n  await fsx.copy(src, dst, {\n    filter,\n  });\n};\n\nconst input = parseArgs({\n  options: {\n    help: {\n      type: \"boolean\",\n      short: \"h\",\n    },\n  },\n});\n\nif (input.values.help) {\n  printUsage();\n  process.exit(0);\n}\n\nconst viteBaseExists = await fsx.exists(resolve(cwd, \"vite.base.ts\"));\n\nconst tsConfigFile = resolve(cwd, \"tsconfig.json\");\nconst tsConfigExists = await fsx.exists(tsConfigFile);\n\nif (viteBaseExists) {\n  // Current directory appears to be a valid AmperJS project,\n  // prompting user to create a new source folder...\n  console.log(\n    styleText(\n      [\"bold\", \"green\"],\n      \"\u279C You are about to create a new Source Folder...\",\n    ),\n  );\n  const folder = await prompts<\"name\" | \"baseurl\" | \"port\">([\n    {\n      type: \"text\",\n      name: \"name\",\n      message: \"Folder Name\",\n      onState,\n      validate(name) {\n        if (!name?.length) {\n          return \"Please insert folder name\";\n        }\n        return validateNameIdentifier(name);\n      },\n    },\n\n    {\n      type: \"text\",\n      name: \"baseurl\",\n      message: \"Base URL\",\n      initial: \"/\",\n      onState,\n      validate(base: string) {\n        if (!base?.startsWith(\"/\")) {\n          return \"Should start with a slash\";\n        }\n        if (/[^\\w./-]/.test(base)) {\n          return \"May contain only alphanumerics, hyphens, periods or slashes\";\n        }\n        if (/\\.\\.\\//.test(base) || /\\/\\.\\//.test(base)) {\n          return \"Should not contain path traversal patterns\";\n        }\n        return true;\n      },\n    },\n\n    {\n      type: \"number\",\n      name: \"port\",\n      message: \"Dev Server Port\",\n      initial: 4000,\n      onState,\n    },\n  ]);\n\n  const dstDir = (...a: Array<string>) => {\n    return resolve(cwd, folder.name, ...a);\n  };\n\n  if (await fsx.exists(dstDir())) {\n    halt(`${colors.blue(folder.name)} already exists`);\n  }\n\n  await copyFiles(tplDir(\"@src\"), dstDir(), {\n    exclude: [/.+\\.hbs/],\n  });\n\n  const context = {\n    ...genericContext,\n    folder,\n    defaults,\n    importPathmap: {\n      core: [defaults.appPrefix, defaults.coreDir, defaults.apiDir].join(\"/\"),\n      lib: [folder.name, defaults.apiLibDir].join(\"/\"),\n    },\n  };\n\n  for (const [file, template] of [\n    [`${defaults.configDir}/index.ts`, srcConfigTpl],\n    [`${defaults.apiDir}/app.ts`, srcApiAppTpl],\n    [`${defaults.apiDir}/router.ts`, srcApiRouterTpl],\n    [`${defaults.apiDir}/server.ts`, srcApiServerTpl],\n    [`${defaults.apiDir}/use.ts`, srcApiUseTpl],\n    [\"vite.config.ts\", srcViteConfigTpl],\n    // stub files for initial build to pass\n    [`${defaults.apiDir}/index/index.ts`, \"\"],\n    [\"index.ts\", \"\"],\n  ]) {\n    await renderToFile(dstDir(file), template, context);\n  }\n\n  const tsConfig = tsConfigExists\n    ? await import(tsConfigFile, {\n        with: { type: \"json\" },\n      }).then((e) => e.default)\n    : undefined;\n\n  const tsConfigOptions = {\n    extends: \"@amperjs/config/tsconfig.vite.json\",\n    ...tsConfig,\n    compilerOptions: {\n      ...tsConfig?.compilerOptions,\n      paths: {\n        ...tsConfig?.compilerOptions?.paths,\n        [`${folder.name}/*`]: [\n          `./${folder.name}/*`,\n          `./${defaults.libDir}/${folder.name}/*`,\n        ],\n      },\n    },\n  };\n\n  await fsx.outputJson(tsConfigFile, tsConfigOptions, { spaces: 2 });\n\n  try {\n    execFileSync(\"vite\", [\"build\", folder.name], {\n      stdio: \"inherit\",\n    });\n  } catch (_error) {}\n} else {\n  // Prompting user to create a new AmperJS project...\n  const project = await prompts<\"name\" | \"distDir\">([\n    {\n      type: \"text\",\n      name: \"name\",\n      message: \"Project Name\",\n      onState,\n      validate(name) {\n        if (!name?.length) {\n          return \"Please insert project name\";\n        }\n        return validateNameIdentifier(name);\n      },\n    },\n\n    {\n      type: \"text\",\n      name: \"distDir\",\n      message: \"Dist Folder\",\n      initial: \".dist\",\n      onState,\n      validate(folderName) {\n        if (!folderName?.length) {\n          return \"Please insert dist folder name\";\n        }\n        return validateNameIdentifier(folderName);\n      },\n    },\n  ]);\n\n  const targetDir = (...a: Array<string>) => {\n    return resolve(cwd, project.name, ...a);\n  };\n\n  if (await fsx.exists(targetDir())) {\n    halt(`${colors.blue(project.name)} already exists`);\n  }\n\n  await copyFiles(tplDir(), targetDir(), {\n    exclude: [/@src/, /.+\\.hbs/],\n  });\n\n  {\n    const context = {\n      ...genericContext,\n      project,\n      defaults,\n    };\n\n    for (const [file, template] of [\n      [\".gitignore\", gitignoreTpl],\n      [\"esbuild.json\", esbuildTpl],\n      [\"package.json\", packageTpl],\n      [\"tsconfig.json\", tsconfigTpl],\n      [\"vite.base.ts\", viteBaseTpl],\n    ]) {\n      await renderToFile(targetDir(file), template, context);\n    }\n  }\n\n  for (const line of [\n    \"\",\n    \"\uD83C\uDF89  Well Done! Your new AmperJS project is ready.\",\n    `\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`,\n    \"\",\n\n    `\uD83D\uDCC2 Next steps:`,\n    `- Navigate to your app dir - ${styleText(\"blue\", `cd ./${project.name}`)}`,\n    `- Install dependencies using your favorite package manager:`,\n\n    ...[\"npm install\", \"pnpm install\", \"yarn install\"].map((cmd) =>\n      styleText(\"blue\", `  ${cmd}`),\n    ),\n    \"\",\n\n    `\uD83D\uDE80 Once dependencies installed, create a source folder by running \\`${styleText(\"blue\", \"npx amperjs\")}\\` again.`,\n\n    styleText(\n      [\"dim\", \"gray\"],\n      \"When run in an application directory, AmperJS will recognize it and guide you through creating a source folder.\\n\",\n    ),\n\n    \"\uD83D\uDCD8  Docs: https://amperjsjs.dev\",\n  ]) {\n    console.log(line);\n  }\n}\n", "import createApp from \"{{importPathmap.core}}/app\";\n\nimport router from \"./router\";\n\nexport default () => {\n  const app = createApp();\n\n  // routes goes latest\n  app.use(router.routes());\n\n  return app;\n};\n\n/**\n * In dev mode, determines whether to pass the request to API handler or to Vite.\nexport const devMiddlewareFactory: import(\"@amperjs/api\").DevMiddlewareFactory = (\n  app,\n) => {\n  return (req, res, next) => {\n    return req.url?.startsWith(\"...\")\n      ? app?.callback()(req, res) // send request to api handler\n      : next(); // send request to vite dev server\n  };\n};\n * */\n\n/**\n * In dev mode, used to cleanup before reloading api handler.\nexport const teardownHandler: import(\"@amperjs/api\").TeardownHandler = () => {\n  // close db connections, server sockets etc.\n};\n * */\n", "import { routerRoutes } from \"{{importPathmap.lib}}\";\n\nimport createRouter from \"{{importPathmap.core}}/router\";\n\nconst router = createRouter();\n\nfor (const { name, path, methods, middleware } of routerRoutes) {\n  router.register(path, methods, middleware, { name });\n}\n\nexport default router;\n", "import createServer from \"{{importPathmap.core}}/server\";\nimport createApp from \"./app\";\n\ncreateServer(createApp);\n", "import globalMiddleware from \"{{defaults.appPrefix}}/core/api/use\";\n\nexport default [\n  // Global middleware applied to all routes\n  ...globalMiddleware,\n];\n", "export const baseurl = \"{{folder.baseurl}}\";\nexport const apiurl = \"/api\"; // relative to baseurl\n", "import { join } from \"node:path\";\n\nimport devPlugin, { apiGenerator, fetchGenerator } from \"@amperjs/dev\";\n\nimport defineConfig from \"../vite.base\";\nimport { apiurl, baseurl } from \"./config\";\n\nexport default defineConfig(import.meta.dirname, {\n  base: join(baseurl, \"/\"),\n  server: {\n    port: {{folder.port}},\n  },\n  plugins: [\n    devPlugin(apiurl, {\n      generators: [apiGenerator(), fetchGenerator()],\n    }),\n  ],\n});\n", "/.env\n/{{project.distDir}}/*\n", "{\n  \"bundle\": true,\n  \"platform\": \"node\",\n  \"target\": \"{{ESBUILD_TARGET}}\",\n  \"format\": \"esm\",\n  \"packages\": \"external\",\n  \"sourcemap\": \"linked\",\n  \"logLevel\": \"info\"\n}\n", "{\n  \"type\": \"module\",\n  \"devEngines\": {\n    \"runtime\": {\n      \"name\": \"node\",\n      \"version\": \"{{NODE_VERSION}}\",\n      \"onFail\": \"download\"\n    }\n  },\n  \"distDir\": \"{{project.distDir}}\",\n  \"dependencies\": {\n    \"@amperjs/api\": \"^0.0.0\",\n    \"qs\": \"^6.14.0\"\n  },\n  \"devDependencies\": {\n    \"@amperjs/config\": \"^0.0.0\",\n    \"@amperjs/dev\": \"^0.0.0\",\n    \"@types/node\": \"^24.0.4\",\n    \"@types/qs\": \"^6.14.0\",\n    \"esbuild\": \"^0.25.5\",\n    \"tslib\": \"^2.8.1\",\n    \"typescript\": \"^5.8.3\",\n    \"vite\": \"^7.0.0\"\n  }\n}\n", "{\n  \"extends\": \"@amperjs/config/tsconfig.vite.json\",\n  \"compilerOptions\": {\n    \"paths\": {\n      \"{{defaults.appPrefix}}/*\": [\"./*\", \"./{{defaults.libDir}}/*\"]\n    }\n  }\n}\n", "import { basename, resolve } from \"node:path\";\n\nimport { aliasPlugin, definePlugin } from \"@amperjs/dev\";\nimport { loadEnv, mergeConfig, type UserConfig } from \"vite\";\n\nimport pkg from \"./package.json\" with { type: \"json\" };\n\nexport default async (sourceFolderPath: string, config: UserConfig) => {\n  const env = loadEnv(\"mock\", import.meta.dirname);\n  const sourceFolder = basename(sourceFolderPath);\n  return mergeConfig(config, {\n    build: {\n      outDir: resolve(import.meta.dirname, `${pkg.distDir}/${sourceFolder}`),\n      emptyOutDir: true,\n      sourcemap: true,\n    },\n\n    server: {\n      host: true,\n      allowedHosts: [env.VITE_HOSTNAME],\n      fs: {\n        strict: false,\n      },\n      watch: {\n        awaitWriteFinish: {\n          stabilityThreshold: 800,\n          pollInterval: 200,\n        },\n      },\n    },\n\n    cacheDir: resolve(import.meta.dirname, `var/.vite/${sourceFolder}`),\n\n    plugins: [\n      aliasPlugin(import.meta.dirname),\n      definePlugin([\n        {\n          // keys extracted from process.env and exposed to client\n          keys: [\"DEBUG\"],\n        },\n      ]),\n    ],\n  });\n};\n"],
  "mappings": "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",
  "names": []
}
